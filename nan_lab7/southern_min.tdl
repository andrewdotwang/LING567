;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of southern_min
;;; created at:
;;;     Tue Feb 13 04:18:21 UTC 2024
;;; based on Matrix customization system version of:
;;;     Fri 27 Oct 2023 04:16:13 PM UTC
;;;
;;; Lab 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

basic-head-comp-phrase :+ [ SYNSEM [ LIGHT #light,
             LOCAL.CAT [ HC-LIGHT #light,
                         MC #mc ],
             SUBORDINATED #subord ],
    HEAD-DTR.SYNSEM [ LOCAL.CAT.MC #mc,
                      SUBORDINATED #subord ] ].

head :+ [ PRON bool,
    PRD bool,
    POSSESSOR poss,
    SPEC-INIT bool,
    FORM form,
    AUX bool,
    INIT bool ].

lex-or-phrase-synsem :+ [ INFOSTR-FLAG luk ].

decl-head-subj-phrase :+ [ SYNSEM.INFOSTR-FLAG -, NON-HEAD-DTR.SYNSEM.INFOSTR-FLAG - ].

basic-head-1st-comp-phrase :+ [ SYNSEM.INFOSTR-FLAG -, NON-HEAD-DTR.SYNSEM.INFOSTR-FLAG - ].

basic-head-2nd-comp-phrase :+ [ SYNSEM.INFOSTR-FLAG -, NON-HEAD-DTR.SYNSEM.INFOSTR-FLAG - ].

basic-head-opt-subj-phrase :+ [ SYNSEM.INFOSTR-FLAG - ].

basic-head-opt-comp-phrase :+ [ SYNSEM.INFOSTR-FLAG - ].

basic-head-mod-phrase-simple :+ [ SYNSEM.INFOSTR-FLAG - ].

basic-head-spec-phrase :+ [ SYNSEM.INFOSTR-FLAG - ].

basic-bare-np-phrase :+ [ SYNSEM.INFOSTR-FLAG -, HEAD-DTR.SYNSEM.INFOSTR-FLAG - ].

png :+ [ PERNUM pernum ].

cat :+ [ POSSESSUM poss ].

poss := *top* &
  [ POSS-AGR png ].

basic-bare-np-phrase :+ [ SYNSEM.LOCAL.CAT [ VAL.SPEC < >,
                       HEAD #head,
                       POSSESSUM #possessum ],
    HEAD-DTR.SYNSEM.LOCAL.CAT [ HEAD #head,
                                POSSESSUM #possessum & nonpossessive ] ].

basic-head-1st-comp-phrase :+ [ SYNSEM.LOCAL.CAT.POSSESSUM #poss,
    HEAD-DTR.SYNSEM.LOCAL.CAT.POSSESSUM #poss ].

basic-head-opt-subj-phrase :+ [ SYNSEM.SUBORDINATED #subord,
    HEAD-DTR.SYNSEM [ LOCAL.CAT.VAL.COMPS < >,
                      SUBORDINATED #subord ] ].

basic-determiner-lex :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR nonpossessive,
                       POSSESSUM nonpossessive ] ].

top-coord-rule :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                       POSSESSUM #possessum ],
    RCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ],
    LCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ] ].

mid-coord-rule :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                       POSSESSUM #possessum ],
    RCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ],
    LCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ] ].

bottom-coord-phrase :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                       POSSESSUM #possessum ],
    NONCONJ-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                   POSSESSUM #possessum ] ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

canonical-synsem :+ [ SUBORDINATED xsubord ].

xsubord := *top*.

none := xsubord.

so := xsubord.

basic-head-subj-phrase :+ [ SYNSEM.SUBORDINATED #subord,
    HEAD-DTR.SYNSEM.SUBORDINATED #subord ].

basic-head-opt-comp-phrase :+ [ SYNSEM.SUBORDINATED #subord,
    HEAD-DTR.SYNSEM.SUBORDINATED #subord ].

adj-head-phrase :+ [ SYNSEM.SUBORDINATED #subord,
    NON-HEAD-DTR.SYNSEM.SUBORDINATED #subord ].

head-adj-phrase :+ [ SYNSEM.SUBORDINATED #subord,
    NON-HEAD-DTR.SYNSEM.SUBORDINATED #subord ].

coord-phrase :+ [ SYNSEM.SUBORDINATED #subord,
    LCOORD-DTR.SYNSEM.SUBORDINATED #subord,
    RCOORD-DTR.SYNSEM.SUBORDINATED #subord ].

unary-bottom-coord-rule :+ [ SYNSEM.SUBORDINATED #subord,
    ARGS < [ SYNSEM.SUBORDINATED #subord ] > ].

non-local-change-only-lex-rule :+ same-subordinated-lex-rule.

local-change-only-lex-rule :+ same-subordinated-lex-rule.

cont-change-only-lex-rule :+ same-subordinated-lex-rule.

cat-change-with-ccont-lex-rule :+ same-subordinated-lex-rule.

add-only-rule :+ same-subordinated-lex-rule.

then := xsubord.

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Pernum

pernum := *top*.
singular := pernum.
plural := pernum.
1st := pernum.
2nd := pernum.
3rd := pernum.
1singular := 1st & singular.
2singular := 2nd & singular.
3singular := 3rd & singular.
1plural := 1st & plural.
1plural_incl := 1plural.
1plural_excl := 1plural.
2plural := 2nd & plural.
3plural := 3rd & plural.

;;; Possession

possession := *top*.
possessive := poss.  ; supertype for possessive features
nonpossessive := poss.  ; type for nonpossessive
possessor := possessive.
possessum := possessive.
possessive-1 := possessive.  ; supertype for strategy 1
possessor-1 := possessor & possessive-1.
possessum-1 := possessum & possessive-1.

;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;; Aspect

imperfective := aspect.
progressive-habitual := imperfective.
durative := imperfective.
experiential := imperfective.
no-aspect := aspect.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

wh-pronoun-noun-lex := basic-wh-word-lex & norm-hook-lex-item & basic-icons-lex-item & non-mod-lex-item & zero-arg-que &
  [ SYNSEM [ LOCAL [ CAT [ HEAD noun,
                           VAL [ SPR < >,
                                 SUBJ < >,
                                 COMPS < >,
                                 SPEC < > ] ],
                     CONT [ RELS.LIST < [ LBL #larg,
                                          ARG0 ref-ind & #arg0 ],
                                        quant-relation &
                                        [ PRED "which_q_rel",
                                          ARG0 #arg0,
                                          RSTR #harg ] >,
                            HCONS.LIST < [ HARG #harg,
                                           LARG #larg ] > ] ],
             NON-LOCAL.QUE.LIST < #arg0 > ] ].

noun-lex := basic-noun-lex & basic-non-wh-word-lex & non-local-none-lex-item & no-hcons-lex-item & non-mod-lex-item &
  [ ARG-ST < #spr >,
    SYNSEM.LOCAL.CAT [ VAL [ SPR < #spr &
                                   [ LOCAL.CAT.HEAD det ] >,
                             COMPS < >,
                             SUBJ < >,
                             SPEC < > ],
                       HEAD.POSSESSOR nonpossessive,
                       POSSESSUM nonpossessive ] ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
;
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM [ OPT -,
                          LOCAL.CAT.VAL.SPEC < [ LOCAL.CAT.POSSESSUM #poss ] > ],
    HEAD-DTR.SYNSEM.LOCAL.CAT.POSSESSUM #poss ].

common-noun-noun-lex := noun-lex.

1st-sg-pronoun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG.PERNUM 1singular ] ].

1st-pl-excl-pronoun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG.PERNUM 1plural_excl ] ].

1st-pl-incl-pronoun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG.PERNUM 1plural_incl ] ].

2nd-sg-pronoun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG.PERNUM 2singular ] ].

2nd-pl-pronoun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG.PERNUM 2plural ] ].

3rd-sg-pronoun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG.PERNUM 3singular ] ].

3rd-pl-pronoun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG.PERNUM 3plural ] ].

proper-noun-noun-lex := no-spr-noun-lex.

ques-pronoun-noun-lex := wh-pronoun-noun-lex.

;;; Verbs

verb-lex := non-mod-lex-item &
  [ SYNSEM [ LOCAL.CAT.HEAD verb,
             L-QUE -,
             SUBORDINATED none ] ].

main-verb-lex := verb-lex & basic-verb-lex & basic-non-wh-word-lex &
  [ SYNSEM [ L-QUE -,
             LOCAL [ CAT [ HEAD.AUX -,
                           VAL [ SPEC < >,
                                 SUBJ < #subj > ] ],
                     CONT.HOOK.XARG #xarg ] ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex & basic-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.HEAD [ AUX +,
                              INIT + ] ] ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] >,
    SYNSEM.LOCAL.CAT [ VAL.COMPS < #comps >,
                       HEAD.INIT + ] ].

clausal-verb-lex := main-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ MC na-or--,
                           VAL [ SPR < >,
                                 COMPS < >,
                                 SUBJ < > ] ] ] > ].

intransitive-verb-verb-lex := intransitive-verb-lex.

transitive-verb-verb-lex := transitive-verb-lex.

transitive-decl-clausal-comps-verb-verb-lex := clausal-verb-lex & clausal-second-arg-trans-lex-item &
  [ SYNSEM [ LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT [ HEAD +vc &
                                                        [ FORM finite ],
                                                   WH.BOOL - ],
                                             CONT.HOOK.INDEX.SF prop ] ] >,
             NON-LOCAL.QUE.LIST < > ] ].

transitive-interrog-clausal-comps-verb-verb-lex := clausal-verb-lex & clausal-second-arg-trans-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT.HEAD +vc &
                                                    [ FORM finite ],
                                           CONT.HOOK.INDEX.SF ques ] ] > ].

;;; Auxiliaries

subj-raise-aux := aux-lex & trans-first-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPEC < >,
                             COMPS < #comps >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun,
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LOCAL.CAT [ VAL [ SUBJ < unexpressed >,
                                 COMPS < >,
                                 SPR < >,
                                 SPEC < > ],
                           HEAD verb ],
                           OPT - ] > ].

subj-raise-aux-with-pred := subj-raise-aux & norm-sem-lex-item & trans-first-arg-raising-lex-item-1.

neg-aux-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL.CAT [ HEAD.FORM finite,
                       VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM nonfinite ] ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

subj-raise-aux-no-pred := subj-raise-aux & raise-sem-lex-item &
  [ ARG-ST < [ ],
             [ LOCAL.CAT.HEAD.AUX - ] > ].

imperfective-aux-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CAT.HEAD.FORM nonfinite,
                                             CONT.HOOK.INDEX.E.ASPECT imperfective ] ].

modal-aux-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM nonfinite ].

;;; Copulas

cop-lex := basic-verb-lex-super & trans-first-arg-raising-lex-item-2 & non-mod-lex-item &
  [ SYNSEM.LOCAL [ CONT.HOOK.XARG #xarg,
                   CAT [ VAL [ SUBJ < [ LOCAL [ CONT.HOOK.INDEX #xarg,
                                                CAT cat-sat &
                                                    [ VAL [ SPR < >,
                                                            COMPS < > ],
                                                      HEAD noun ] ] ] >,
                               COMPS < [ LOCAL.CAT cat-sat &
                                                   [ HEAD.PRD +,
                                                     VAL [ SUBJ < >,
                                                           COMPS < > ] ] ] >,
                               SPEC < > ],
                         HEAD.INIT + ] ] ].

; Copula type taking adjectival complements.
; Need to define more for additional complement types.

adj-comp-copula-verb-lex := cop-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD adj ].

copula-cop-lex := adj-comp-copula-verb-lex.

locative-copula-cop-lex := adj-comp-copula-verb-lex.

;;; Adjectives

adj-lex := basic-intersective-adjective-lex & non-local-none-lex-item.

adjective-adj-lex := attr-adj-lex &
  [ SYNSEM.LOCAL.CAT [ POSTHEAD -,
                       VAL.SUBJ < >,
                       HEAD.PRD + ] ].

; Basic attributive adjective definition

attr-adj-lex := adj-lex & intersective-mod-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT [ HEAD noun,
                                              VAL.SPR cons ] ] > ].

;;;;;;;;;;;;;;;;;;;
;;; Subordinators
;;;;;;;;;;;;;;;;;;;

adverb-subord-lex-item := no-rels-hcons-lex-item & basic-icons-lex-item &
  [ SYNSEM.LOCAL.CAT [ VAL [ SUBJ < >,
                             SPR < >,
                             SPEC < >,
                             COMPS < > ],
                       HEAD adv &
                            [ MOD < [ SUBORDINATED none,
                                      LOCAL intersective-mod &
                                            [ CAT [ MC -,
                                                    HEAD verb ] ] ] > ] ] ].

posthead-so-clause-init-adv-subord-lex-item := adverb-subord-lex-item &
  [ SYNSEM [ SUBORDINATED so,
             LOCAL.CAT [ HEAD.MOD < [ LOCAL.CAT.VAL [ SUBJ < >,
                                                      COMPS < > ] ] >,
                         POSTHEAD - ] ] ].

adv-marked-subord-clause-phrase := unary-phrase &
  [ SYNSEM.LOCAL [ CAT [ MC -,
                         VAL [ SPR < >,
                               COMPS < >,
                               SPEC < >,
                               SUBJ #subj ],
                         HEAD adp &
                              [ MOD < [ LOCAL scopal-mod &
                                              [ CAT [ HEAD verb,
                                                      VAL [ SPR < >,
                                                            COMPS < > ] ],
                                                CONT.HOOK [ LTOP #mcl,
                                                            INDEX #index ] ] ] > ] ],
                   COORD - ],
    C-CONT [ RELS.LIST < arg12-ev-relation &
                         [ ARG1 #mch,
                           ARG2 #sch ] >,
             HCONS.LIST < qeq &
                          [ HARG #mch,
                            LARG #mcl ],
                          qeq &
                          [ HARG #sch,
                            LARG #scl ] >,
             ICONS.LIST < >,
             HOOK.INDEX #index ],
    ARGS < [ SYNSEM.LOCAL [ CAT [ HEAD verb &
                                       [ MOD < > ],
                                  VAL [ SUBJ #subj,
                                        SPR < >,
                                        COMPS < >,
                                        SPEC < > ] ],
                            CONT.HOOK.LTOP #scl,
                            COORD - ] ] > ].

so-modifying-clause-phrase := adv-marked-subord-clause-phrase &
  [ C-CONT.RELS.LIST < [ PRED "_so_subord_rel" ] >,
    ARGS < [ SYNSEM [ SUBORDINATED so,
                      LOCAL.CAT.VAL.SUBJ < > ] ] >,
    SYNSEM.LOCAL.CAT [ POSTHEAD +,
                       HEAD.MOD < [ LOCAL.CAT.VAL.SUBJ < > ] > ] ].

posthead-then-clause-init-adv-subord-lex-item := adverb-subord-lex-item &
  [ SYNSEM [ SUBORDINATED then,
             LOCAL.CAT [ HEAD.MOD < [ LOCAL.CAT.VAL [ SUBJ < >,
                                                      COMPS < > ] ] >,
                         POSTHEAD - ] ] ].

then-modifying-clause-phrase := adv-marked-subord-clause-phrase &
  [ C-CONT.RELS.LIST < [ PRED "_then_subord_rel" ] >,
    ARGS < [ SYNSEM [ SUBORDINATED then,
                      LOCAL.CAT.VAL.SUBJ < > ] ] >,
    SYNSEM.LOCAL.CAT [ POSTHEAD +,
                       HEAD.MOD < [ LOCAL.CAT.VAL.SUBJ < > ] > ] ].

;;; Complementizers

; We treat question particles as complementizers.
; Here is the lexical type for complementizers.

complementizer-lex-item := raise-sem-lex-item & non-local-none-lex-item & basic-icons-lex-item &
  [ SYNSEM.LOCAL.CAT [ HEAD comp &
                            [ MOD < > ],
                       VAL [ SPR < >,
                             SPEC < >,
                             SUBJ < >,
                             COMPS < #comp > ] ],
    ARG-ST < #comp &
             [ LOCAL.CAT [ HEAD verb,
                           VAL [ SUBJ < >,
                                 COMPS < > ] ] ] > ].

; Subtype for question particles. Constrains SF to ques.

qpart-lex-item := complementizer-lex-item &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.SF ques,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

q-particle1-lex := qpart-lex-item &
  [ SYNSEM.LOCAL.CAT [ MC #mc,
                       VAL.COMPS.FIRST.LOCAL.CAT [ MC #mc & +,
                                                   WH.BOOL - ] ] ].

comps1-complementizer-lex-item := complementizer-lex-item & basic-non-wh-word-lex &
  [ SYNSEM.LOCAL [ CAT [ MC na-or--,
                         VAL.COMPS.FIRST.LOCAL.CAT [ MC -,
                                                     HEAD.FORM finite ] ],
                   CONT.HOOK.INDEX.SF prop ] ].

comps2-complementizer-lex-item := complementizer-lex-item & basic-wh-word-lex &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.SF ques,
                   CAT [ MC na-or--,
                         VAL.COMPS.FIRST [ LOCAL.CAT [ MC -,
                                                       HEAD.FORM finite ],
                                           NON-LOCAL.QUE.LIST < > ] ] ] ].

insitu-int-cl := interrogative-clause & head-only &
  [ C-CONT [ RELS.LIST < >,
             HCONS.LIST < > ],
    HEAD-DTR.SYNSEM [ LOCAL.CAT [ HEAD verb,
                                  VAL #val &
                                      [ SUBJ < >,
                                        COMPS < > ] ],
                      NON-LOCAL [ SLASH.LIST < >,
                                  REL.LIST < >,
                                  QUE.LIST.FIRST ref-ind ] ],
    SYNSEM [ MODIFIED hasmod,
             NON-LOCAL [ SLASH.LIST < >,
                         QUE.LIST < >,
                         REL.LIST < > ],
             LOCAL.CAT [ VAL #val,
                         MC bool,
                         WH.BOOL + ] ] ].

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & basic-non-wh-word-lex & norm-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT [ VAL [ SPR < >,
                             COMPS < >,
                             SUBJ < > ],
                       HEAD.INIT + ] ].

demonst-det-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

;;; Adverbs

adverb-lex-item := nonscop-adverb-lex &
  [ SYNSEM [ LOCAL [ CAT [ VAL [ SUBJ < >,
                                 SPEC < >,
                                 SPR < >,
                                 COMPS < > ],
                           HEAD adv &
                                [ MOD < [ LOCAL [ CAT.HEAD verb,
                                                  CONT.HOOK [ CLAUSE-KEY #clause,
                                                              LTOP #ltop ] ] ] > ] ],
                     CONT [ RELS.LIST < [ LBL #ltop,
                                          ARG0 event,
                                          ARG1 #clause,
                                          ARG2 #ind ],
                                        [ PRED #pred,
                                          ARG0 #ind,
                                          LBL #larg ],
                                        [ ARG0 #ind,
                                          RSTR #harg ] >,
                            HOOK.LTOP #ltop,
                            HCONS.LIST < qeq &
                                         [ HARG #harg,
                                           LARG #larg ] > ] ],
             LKEYS.KEYREL [ PRED #pred,
                            ARG0 ref-ind & #ind,
                            LBL #ltop ] ] ].

manner-adverb-lex-item := adverb-lex-item &
  [ SYNSEM.LOCAL.CONT.RELS.LIST.FIRST.PRED "manner_nonsp_rel" ].

adverb-lex := basic-non-wh-word-lex & adverb-lex-item & norm-zero-arg &
  [ SYNSEM.LOCAL.CONT.RELS.LIST < [ ],
                                  [ ],
                                  [ PRED "exist_q_rel" ] > ].

neg-adv-adverb-lex := manner-adverb-lex-item & adverb-lex.

two-rel-adposition-lex := basic-icons-lex-item &
  [ SYNSEM [ LOCAL [ CAT [ HEAD adp,
                           VAL.COMPS < [ LOCAL [ CAT cat-sat,
                                                 CONT.HOOK #hook &
                                                           [ INDEX #ind,
                                                             ICONS-KEY.IARG1 #clause ] ] ] > ],
                     CONT.HOOK #hook &
                               [ CLAUSE-KEY #clause ] ],
             LKEYS.KEYREL arg12-ev-relation &
                          [ ARG2 #ind ] ] ].

possessor-adp-lex-1 := two-rel-adposition-lex &
  [ SYNSEM.LOCAL [ CAT [ VAL [ SPEC < >,
                               SUBJ < >,
                               SPR < >,
                               COMPS.FIRST [ LOCAL.CAT [ HEAD noun,
                                                         VAL.SPR < > ],
                                             OPT - ] ],
                         HEAD [ MOD < >,
                                INIT -,
                                POSSESSOR possessor-1 ],
                         POSSESSUM nonpossessive ],
                   CONT [ ICONS.LIST < >,
                          RELS.LIST < >,
                          HCONS.LIST < > ] ] ].

basic-adposition-lex :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR nonpossessive,
                       POSSESSUM nonpossessive ] ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Lexical rule types

same-subordinated-lex-rule := lex-rule &
  [ SYNSEM.SUBORDINATED #subord,
    DTR.SYNSEM.SUBORDINATED #subord ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

nf-comp-head-phrase := head-nf-comp-phrase-super & head-final &
  [ HEAD-DTR.SYNSEM.LIGHT +,
    NON-HEAD-DTR.SYNSEM.LOCAL [ CAT.HEAD +np,
                                CONT.HOOK.ICONS-KEY semantic-focus ] ].

head-nf-subj-phrase-super := basic-head-subj-phrase & declarative-clause & narrow-focus &
  [ NON-HEAD-DTR.SYNSEM.INFOSTR-FLAG + ].

head-nf-comp-phrase-super := basic-head-comp-phrase & narrow-focus &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS #comps,
    HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < #synsem . #comps >,
    NON-HEAD-DTR.SYNSEM #synsem &
                        [ INFOSTR-FLAG + ] ].

narrow-focused-phrase := head-only & unary-nonloc-phrase &
  [ C-CONT [ HOOK #hook,
             RELS.LIST < >,
             HCONS.LIST < >,
             ICONS.LIST < focus-or-topic & #icons &
                          [ IARG2 #target ] > ],
    SYNSEM [ LIGHT -,
             INFOSTR-FLAG +,
             LOCAL [ CAT.VAL [ SPR < >,
                               SUBJ < >,
                               COMPS < >,
                               SPEC < > ],
                     CONT.HOOK [ INDEX #target,
                                 ICONS-KEY #icons ] ] ],
    HEAD-DTR.SYNSEM [ LIGHT -,
                      INFOSTR-FLAG -,
                      LOCAL [ CAT.HEAD noun,
                              CONT [ HOOK #hook,
                                     ICONS.LIST < > ] ] ] ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-comp-phrase := basic-head-1st-comp-phrase & head-initial &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.INIT + ].

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; comp-head-phrase requires things that are one of: []

comp-head-phrase := basic-head-1st-comp-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.INIT -,
    SYNSEM.LOCAL.CAT.HEAD +vc &
                          [ AUX + ] ].

poss-unary-phrase-1 := poss-unary-phrase &
  [ ARGS < [ SYNSEM.LOCAL.CAT.HEAD.POSSESSOR possessor-1 ] >,
    SYNSEM.LOCAL.CAT [ HEAD.SPEC-INIT +,
                       VAL.SPEC.FIRST.LOCAL.CAT.POSSESSUM nonpossessive ] ].

poss-unary-phrase := basic-unary-phrase &
  [ SYNSEM [ NON-LOCAL #nonloc,
             LOCAL [ CONT.HOOK #hook,
                     CAT [ HEAD det &
                                [ MOD < >,
                                  POSSESSOR possessor ],
                           VAL [ SPR < >,
                                 COMPS < >,
                                 SUBJ < >,
                                 SPEC < [ LOCAL [ CAT [ VAL.COMPS < >,
                                                        HEAD noun &
                                                             [ PRON - ] ],
                                                  CONT.HOOK #hook &
                                                            [ INDEX #possessum &
                                                                    [ COG-ST uniq-id ],
                                                              LTOP #lbl ] ] ] > ] ] ] ],
    C-CONT [ RELS.LIST < arg12-ev-relation &
                         [ PRED "poss_rel",
                           LBL #lbl,
                           ARG1 #possessum,
                           ARG2 #possessor ],
                         quant-relation &
                         [ PRED "exist_q_rel",
                           ARG0 #possessum,
                           RSTR #harg ] >,
             HCONS.LIST < qeq &
                          [ HARG #harg,
                            LARG #lbl ] >,
             ICONS.LIST < > ],
    ARGS < [ SYNSEM [ LOCAL [ CAT [ VAL [ SPR < >,
                                          COMPS < >,
                                          SUBJ < >,
                                          SPEC < > ],
                                    HEAD +np ],
                              CONT.HOOK.INDEX #possessor ],
                      NON-LOCAL #nonloc ] ] > ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS.LIST < [ PRED "exist_q_rel" ] >,
    SYNSEM.LIGHT - ].

;;; Head Adjunct rules

; For intersective adjuncts with underspecified attachment locations:

;;; Wh-question-related phrasal types

; In-situ interrogative clause.

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

adv1-top-coord-rule := basic-adv-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

adv1-mid-coord-rule := basic-adv-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

adv1-bottom-coord-rule := conj-first-bottom-coord-rule & adv-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

n1-top-coord-rule := basic-n-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-mid-coord-rule := basic-n-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

np1-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 2

vp2-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

vp2-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

vp2-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Coordination Strategy 3

n3-top-coord-rule := basic-n-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

n3-mid-coord-rule := basic-n-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

n3-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

;;; Coordination Strategy 3

np3-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

np3-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

np3-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

;;; Coordination Strategy 4

s4-top-coord-rule := basic-s-top-coord-rule & omni-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

s4-mid-coord-rule := basic-s-mid-coord-rule & omni-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

s4-bottom-coord-rule := omni-conj-first-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

s4-left-coord-rule := omni-conj-first-left-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

;;; Coordination Strategy 5

n5-top-coord-rule := basic-n-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "5" ].

n5-mid-coord-rule := basic-n-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "5" ].

n5-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "5" ].

;;; Coordination Strategy 5

np5-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "5" ].

np5-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "5" ].

np5-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "5" ].

;;; Coordination Strategy 5

vp5-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "5" ].

vp5-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "5" ].

vp5-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "5" ].

;;; Coordination Strategy 6

vp6-top-coord-rule := basic-vp-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "6" ].

vp6-bottom-coord-rule := unary-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ COORD-STRAT "6",
                   COORD-REL.PRED "_and_coord_rel" ] ].

;;; Edits

nosem-conj-lex :+
  [ SYNSEM.LOCAL.CAT.VAL.SPEC < > ].
